<?php

define("APP_ID", '1262285140507519');
define("APP_SECRET",'9bd9614cef9c9fc45258775500e42c4a');
define("GRAPH_VERSION",'v2.8');

// include FB PHP library
$path = function_exists('libraries_get_path') ? libraries_get_path('php-graph-sdk') : 'sites/all/libraries/php-graph-sdk';
if (!include($path . '/vendor/autoload.php')) {
}

// include Mailchimp PHP library
$path = function_exists('libraries_get_path') ? libraries_get_path('activecampaign-api') : 'sites/all/libraries/activecampaign-api';
require_once($path . '/vendor/autoload.php');

// include Mailchimp PHP library
$path = function_exists('libraries_get_path') ? libraries_get_path('mailchimp-api') : 'sites/all/libraries/mailchimp-api';
require_once($path . '/src/MailChimp.php');
use \DrewM\MailChimp\MailChimp;


function fbsubscriber_permission() {
  return array(
    'access fbsubscriber' => array(
      'title' => t('Access fbsubscriber'),
    ),
  );
}


function fbsubscriber_menu() {
    $items = array();
/*    
        $items['admin/config/services/affilinet'] = array(
        'title' => t('affili.net'),
        'page callback' => 'drupal_get_form',
        'page arguments' => array('affilinet_admin_config_form'),  
        'access arguments' => array('administer site configuration'),
        'type' => MENU_CALLBACK,
    );
*/

   $items['mailsystems'] = array(
        'title' => t('Mailsystems Configuration'),
        'page callback' => 'drupal_get_form',
        'page arguments' => array('fbsubscriber_mailsystems_form'),  
        'access arguments' => array('access fbsubscriber'),
    );

    $items['fb-callback/%'] = array(
        'title' => t('FB Callback'),
        'access arguments' => array('access content'),
        'page arguments' => array(1),  
        'page callback' => 'fbsubscriber_callback',
    );
    
    $items['go/%'] = array(
        'title' => t('Go'),
        'access arguments' => array('access content'),
        'page arguments' => array(1),  
        'page callback' => 'fbsubscriber_go',
    );
          
    $items['actest'] = array(
        'title' => t('AC Account'),
        'access arguments' => array('access content'),
        'page arguments' => array(0),  
        'page callback' => 'fbsubscriber_mc_get_lists',
    );          
          
  $items['dropdown'] = array(
    'title' => t('Mailsystem'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fbsubscriber_example_dependent_dropdown'),
    'access callback' => TRUE,
  );
            
    return $items;
}

function fbsubscriber_go($nid){
if (!isset($_SESSION['go'])) {
    // Start session
    session_start();
    $_SESSION['go'] = 1;
}

    db_insert('fbsubscriber_login')
    ->fields(array(
    'nid' => $nid,
    'datetime' => date("Y-m-d H:i:s", time()),
    'sessionID' => session_id(),
    ))->execute();
    
    $link = fbsubscriber_login($nid);
    drupal_goto($link);    
}

function fbsubscriber_login($nid){

    $fb = new Facebook\Facebook(array(
      'app_id' => APP_ID,
      'app_secret' => APP_SECRET,
      'default_graph_version' => GRAPH_VERSION,
      'persistent_data_handler'=>'session'
      ));
    
    $helper = $fb->getRedirectLoginHelper();
    
    $permissions = array('public_profile','email'); // Optional permissions
    $loginUrl = $helper->getLoginUrl('http://1clicksubscriber.com/fb-callback/'.$nid, $permissions);
    
    return $loginUrl;
}


function fbsubscriber_callback($nid){
if (!isset($_SESSION['go'])) {
    // Start session
    session_start();
    $_SESSION['go'] = 1;
}

    $fb = new Facebook\Facebook(array(
      'app_id' => APP_ID,
      'app_secret' => APP_SECRET,
      'default_graph_version' => GRAPH_VERSION,
      'persistent_data_handler'=>'session'
      ));
    
    $helper = $fb->getRedirectLoginHelper();
    //$_SESSION['FBRLH_state']=$_GET['state'];
    
    try {
      $accessToken = $helper->getAccessToken();
    } catch(Facebook\Exceptions\FacebookResponseException $e) {
      // When Graph returns an error
      echo 'Graph returned an error: ' . $e->getMessage();
      exit;
    } catch(Facebook\Exceptions\FacebookSDKException $e) {
      // When validation fails or other local issues
      echo 'Facebook SDK returned an error: ' . $e->getMessage();
      exit;
    }
    
    if (! isset($accessToken)) {
      if ($helper->getError()) {
        header('HTTP/1.0 401 Unauthorized');
        echo "Error: " . $helper->getError() . "\n";
        echo "Error Code: " . $helper->getErrorCode() . "\n";
        echo "Error Reason: " . $helper->getErrorReason() . "\n";
        echo "Error Description: " . $helper->getErrorDescription() . "\n";
      } else {
        header('HTTP/1.0 400 Bad Request');
        echo 'Bad request';
      }
      exit;
    }
    
    // Logged in
    //echo '<h3>Access Token</h3>';
    //var_dump($accessToken->getValue());
    
    // The OAuth 2.0 client handler helps us manage access tokens
    $oAuth2Client = $fb->getOAuth2Client();
    
    // Get the access token metadata from /debug_token
    $tokenMetadata = $oAuth2Client->debugToken($accessToken);
    //echo '<h3>Metadata</h3>';
    //var_dump($tokenMetadata);
    
    // Validation (these will throw FacebookSDKException's when they fail)
    $tokenMetadata->validateAppId(APP_ID);
    // If you know the user ID this access token belongs to, you can validate it here
    //$tokenMetadata->validateUserId('123');
    $tokenMetadata->validateExpiration();
    
    if (! $accessToken->isLongLived()) {
      // Exchanges a short-lived access token for a long-lived one
      try {
        $accessToken = $oAuth2Client->getLongLivedAccessToken($accessToken);
      } catch (Facebook\Exceptions\FacebookSDKException $e) {
        echo "<p>Error getting long-lived access token: " . $e->getMessage() . "</p>\n\n";
        exit;
      }
    
      echo '<h3>Long-lived</h3>';
      var_dump($accessToken->getValue());
    }
    
    $_SESSION['fb_access_token'] = (string) $accessToken;
    
    // User is logged in with a long-lived access token.
    // You can redirect them to a members-only page.
    //header('Location: https://example.com/members.php');
    
    try {
      // Returns a `Facebook\FacebookResponse` object
      $response = $fb->get('/me?fields=first_name,last_name,email,gender,locale,link,id', $accessToken);
    } catch(Facebook\Exceptions\FacebookResponseException $e) {
      echo 'Graph returned an error: ' . $e->getMessage();
      exit;
    } catch(Facebook\Exceptions\FacebookSDKException $e) {
      echo 'Facebook SDK returned an error: ' . $e->getMessage();
      exit;
    }
    
    $user = $response->getGraphUser();

    $node = node_load($nid);
    $uid = $node->uid;
    $listid = $node->field_listid['und'][0]['value'];
    if (isset($node->field_listtags['und'][0]['value'])) {$tags = $node->field_listtags['und'][0]['value'];}
    $redirect = $node->field_redirect['und'][0]['value'];
    $term = taxonomy_term_load($node->field_mailsystem['und'][0]['tid']);
    $mailsystem = $term->name;
    
    $ip = $_SERVER['REMOTE_ADDR'];

    db_insert('fbsubscriber_callback')
    ->fields(array(
    'nid' => $nid,
    'datetime' => date("Y-m-d H:i:s", time()),
    'sessionID' => session_id(),
    'first_name' => $user['first_name'], 
    'last_name' => $user['last_name'],
    'email' => $user['email'],
    'gender' => $user['gender'],
    'locale' => $user['locale'],
    'fbID' => $user['id'],
    'ip' => $ip,
    ))->execute();
    

    switch ($mailsystem){
        case 'Activecampaign':
            $output = fbsubscriber_ac_contact_add($uid, $listid, $user['email'], $user['first_name'], $user['last_name'], $tags, $ip);
            break;
        case 'Mailchimp':
            $output = fbsubscriber_mc_contact_add($uid, $listid, $user['email'], $user['first_name'], $user['last_name'], $user['locale'], $ip);
            break;
    }

    drupal_goto($redirect);
    //return $output;

}

function fbsubscriber_ac_contact_add($uid,$listid,$email,$first_name,$last_name,$tags,$ip){

    $systems = db_query("SELECT * FROM {fbsubscriber_mailsystem} WHERE uid='" . $uid . "'")->fetchAssoc();
    $url = $systems['ac_url'];
    
    $params = array(    
        'api_key'      => $systems['ac_api_key'],
        'api_action'   => 'contact_sync',
        'api_output'   => 'serialize',
    );
    
    // here we define the data we are posting in order to perform an update
    $post = array(
        'email'                    => $email,
        'first_name'               => $first_name,
        'last_name'                => $last_name,
        'tags'                     => $tags,
        'ip4'                      => $ip,
    
        // any custom fields
        //'field[345,0]'           => 'field value', // where 345 is the field ID
        //'field[%PERS_1%,0]'      => 'field value', // using the personalization tag instead (make sure to encode the key)
    
        // assign to lists:
        'p[$listid]'                   => $listid, // example list ID (REPLACE '123' WITH ACTUAL LIST ID, IE: p[5] = 5)
        'status[$listid]'              => 1, // 1: active, 2: unsubscribed (REPLACE '123' WITH ACTUAL LIST ID, IE: status[5] = 1)
        //'form'          => 1001, // Subscription Form ID, to inherit those redirection settings
        //'noresponders[$listid]'      => 1, // uncomment to set "do not send any future responders"
        //'sdate[$listid]'             => '2009-12-07 06:00:00', // Subscribe date for particular list - leave out to use current date/time
        // use the folowing only if status=1
        'instantresponders[$listid]' => 1, // set to 0 to if you don't want to sent instant autoresponders
        //'lastmessage[$listid]'       => 1, // uncomment to set "send the last broadcast campaign"
    
        //'p[]'                    => 345, // some additional lists?
        //'status[$listid]'            => 1, // some additional lists?
    );
    
    // This section takes the input fields and converts them to the proper format
    $query = "";
    foreach( $params as $key => $value ) $query .= urlencode($key) . '=' . urlencode($value) . '&';
    $query = rtrim($query, '& ');
    
    // This section takes the input data and converts it to the proper format
    $data = "";
    foreach( $post as $key => $value ) $data .= urlencode($key) . '=' . urlencode($value) . '&';
    $data = rtrim($data, '& ');
    
    // clean up the url
    $url = rtrim($url, '/ ');
    
    // This sample code uses the CURL library for php to establish a connection,
    // submit your request, and show (print out) the response.
    if ( !function_exists('curl_init') ) return('CURL not supported. (introduced in PHP 4.0.2)');
    
    // If JSON is used, check if json_decode is present (PHP 5.2.0+)
    if ( $params['api_output'] == 'json' && !function_exists('json_decode') ) {
        return('JSON not supported. (introduced in PHP 5.2.0)');
    }
    
    // define a final API request - GET
    $api = $url . '/admin/api.php?' . $query;
    
    $request = curl_init($api); // initiate curl object
    curl_setopt($request, CURLOPT_HEADER, 0); // set to 0 to eliminate header info from response
    curl_setopt($request, CURLOPT_RETURNTRANSFER, 1); // Returns response data instead of TRUE(1)
    curl_setopt($request, CURLOPT_POSTFIELDS, $data); // use HTTP POST to send form data
    //curl_setopt($request, CURLOPT_SSL_VERIFYPEER, FALSE); // uncomment if you get no gateway response and are using HTTPS
    //curl_setopt($request, CURLOPT_FOLLOWLOCATION, true);
    
    $response = (string)curl_exec($request); // execute curl post and store results in $response
    
    // additional options may be required depending upon your server configuration
    // you can find documentation on curl options at http://www.php.net/curl_setopt
    curl_close($request); // close curl object
    
    if ( !$response ) {
        return('Nothing was returned. Do you have a connection to Email Marketing server?');
    }
    
    // This line takes the response and breaks it into an array using:
    // JSON decoder
    //$result = json_decode($response);
    // unserializer
    $result = unserialize($response);
    // XML parser...
    // ...
    
    // Result info that is always returned
    $output = 'Result: ' . ( $result['result_code'] ? 'SUCCESS' : 'FAILED' ) . '<br />';
    $output .= 'Message: ' . $result['result_message'] . '<br />';
/*    
    // The entire result printed out
    $output .= 'The entire result printed out:<br />';
    $output .= '<pre>';
    print_r($result);
    $output .= '</pre>';
    
    // Raw response printed out
    $output .= 'Raw response printed out:<br />';
    $output .= '<pre>';
    print_r($response);
    $output .= '</pre>';
    
    // API URL that returned the result
    $output .= 'API URL that returned the result:<br />';
    $output .= $api;
    
    $output .= '<br /><br />POST params:<br />';
    $output .= '<pre>';
    print_r($post);
    $output .= '</pre>';
*/    
    return $output;
}

function fbsubscriber_mc_contact_add($uid,$listid,$email,$first_name,$last_name,$language,$ip){

    $systems = db_query("SELECT * FROM {fbsubscriber_mailsystem} WHERE uid='" . $uid . "'")->fetchAssoc();
    $MailChimp = new MailChimp($systems['mc_api_key']);
    
    $result = $MailChimp->post("lists/$listid/members", array(
            'email_address' => $email,
            'status'        => 'subscribed',
        ));

    $subscriber_hash = $MailChimp->subscriberHash($email);
    $result = $MailChimp->patch("lists/$listid/members/$subscriber_hash", array(
            'merge_fields' => array('FNAME'=>$first_name, 'LNAME'=>$last_name),
            'ip_signup' => $ip,
            'ip_opt' => $ip,
            'language' => substr($language,0,2),
            'timestamp_signup' => date("Y-m-d H:i:s", time()),
    ));

                
    return $result;
}

function fbsubscriber_ac_get_lists() {
global $user;
    $mailsystem = db_query("SELECT * FROM {fbsubscriber_mailsystem} WHERE uid='" . $user->uid . "'")->fetchAssoc();
    $ac = new ActiveCampaign($mailsystem['ac_url'], $mailsystem['ac_api_key']);
    $lists = $ac->api("list/list?ids=all");
   
   $list=array();
    $i = 0;
    while (isset($lists->$i->id)) {
        $list[$i]['id'] = $lists->$i->id;
        $list[$i]['name'] = $lists->$i->name;
        $i++;
    }
    return $list;
}

function fbsubscriber_mc_get_lists() {
global $user;

    $mc = db_query("SELECT mc_api_key FROM {fbsubscriber_mailsystem} WHERE uid='" . $user->uid . "'")->fetchAssoc();
    $MailChimp = new MailChimp($mc['mc_api_key']);
    $result = $MailChimp->get('lists');
    $lists = array();
    $i = 0;
    foreach ($result['lists'] as $list) {
        $lists[$i]['id'] = $list['id'];
        $lists[$i]['name'] = $list['name'];
        $i++;
    }

    return $lists;
}

function fbsubscriber_mailsystems_form($form,&$form_state) {
global $user;
    $systems = db_query("SELECT * FROM {fbsubscriber_mailsystem} WHERE uid='" . $user->uid . "'")->fetchAssoc();
            
    $form['ac_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Activecampaign URL'),
    '#default_value' => $systems['ac_url'],
    );
    
    $form['ac_api_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Activecampaign API Key'),
    '#default_value' => $systems['ac_api_key'],
    );
                    
    $form['mc_api_key'] = array(
    '#type' => 'textfield',
    '#title' => t('MailChimp API Key'),
    '#default_value' => $systems['mc_api_key'],
    );
        
    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Submit'),
    );      
    
    return $form;
}

function fbsubscriber_mailsystems_form_submit(&$form_state) {
global $user;
    $systems = db_query("SELECT * FROM {fbsubscriber_mailsystem} WHERE uid='" . $user->uid . "'")->fetchAssoc();
    if (isset($systems['uid'])) {
        db_update('fbsubscriber_mailsystem')
        ->fields(array(
        'ac_url' => $form_state['ac_url']['#value'],
        'ac_api_key' => $form_state['ac_api_key']['#value'],
        'mc_api_key' => $form_state['mc_api_key']['#value'],
        ))
        ->condition('uid',$user->uid,'=')
        ->execute();
    } else {
        db_insert('fbsubscriber_mailsystem')
        ->fields(array(
        'uid' => $user->uid,
        'ac_url' => $form_state['ac_url']['#value'],
        'ac_api_key' => $form_state['ac_api_key']['#value'],
        'mc_api_key' => $form_state['mc_api_key']['#value'],
        ))->execute();
    }
    drupal_set_message(t('Your configuration has been saved.'));
}

function fbsubscriber_form_alter(&$form, &$form_state, $form_id) {

  if ($form_id == 'project_node_form') {
    //dpm($form);
    }
}


/**
 * AJAX-based dropdown example form.
 *
 * A form with a dropdown whose options are dependent on a
 * choice made in a previous dropdown.
 *
 * On changing the first dropdown, the options in the second
 * are updated.
 */
function fbsubscriber_example_dependent_dropdown($form, &$form_state) {
  // Get the list of options to populate the first dropdown.
  $options_first = _fbsubscriber_example_get_first_dropdown_options();
  // If we have a value for the first dropdown from $form_state['values'] we use
  // this both as the default value for the first dropdown and also as a
  // parameter to pass to the function that retrieves the options for the
  // second dropdown.
  $selected = isset($form_state['values']['dropdown_first']) ? $form_state['values']['dropdown_first'] : key($options_first);

  $form['dropdown_first'] = array(
    '#type' => 'select',
    '#title' => 'Mailsytem',
    '#options' => $options_first,
    '#default_value' => $selected,
    // Bind an ajax callback to the change event (which is the default for the
    // select form type) of the first dropdown. It will replace the second
    // dropdown when rebuilt.
    '#ajax' => array(
      // When 'event' occurs, Drupal will perform an ajax request in the
      // background. Usually the default value is sufficient (eg. change for
      // select elements), but valid values include any jQuery event,
      // most notably 'mousedown', 'blur', and 'submit'.
      // 'event' => 'change',
      'callback' => 'fbsubscriber_example_dependent_dropdown_callback',
      'wrapper' => 'dropdown-second-replace',
    ),
  );

  $form['dropdown_second'] = array(
    '#type' => 'select',
    '#title' => t('List'),
    // The entire enclosing div created here gets replaced when dropdown_first
    // is changed.
    '#prefix' => '<div id="dropdown-second-replace">',
    '#suffix' => '</div>',
    // When the form is rebuilt during ajax processing, the $selected variable
    // will now have the new value and so the options will change.
    '#options' => _fbsubscriber_example_get_second_dropdown_options($selected),
    '#default_value' => isset($form_state['values']['dropdown_second']) ? $form_state['values']['dropdown_second'] : '',
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );
  return $form;
}

/**
 * Selects just the second dropdown to be returned for re-rendering.
 *
 * Since the controlling logic for populating the form is in the form builder
 * function, all we do here is select the element and return it to be updated.
 *
 * @return array
 *   Renderable array (the second dropdown)
 */
function fbsubscriber_example_dependent_dropdown_callback($form, $form_state) {
  return $form['dropdown_second'];
}

/**
 * Helper function to populate the first dropdown.
 *
 * This would normally be pulling data from the database.
 *
 * @return array
 *   Dropdown options.
 */
function _fbsubscriber_example_get_first_dropdown_options() {
  // drupal_map_assoc() just makes an array('String' => 'String'...).
  return drupal_map_assoc(
    array(
      t('Activecampaign'),
      t('Aweber'),
      t('GetResponse'),
      t('Mailchimp'),
    )
  );
}

/**
 * Helper function to populate the second dropdown.
 *
 * This would normally be pulling data from the database.
 *
 * @param string $key
 *   This will determine which set of options is returned.
 *
 * @return array
 *   Dropdown options
 */
function _fbsubscriber_example_get_second_dropdown_options($key = '') {
    switch ($key) {
        case "Activecampaign":
            $lists = fbsubscriber_ac_get_lists();
            break;
        case "Mailchimp":
            $lists = fbsubscriber_mc_get_lists();
            break;
    }
  
  $options = array();
  foreach($lists as $list) {
      $options[$list['id']] = $list['name'];
  }

  if (isset($options)) {
    return $options;
  }
  else {
    return array();
  }
}